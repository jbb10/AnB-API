Protocol: Keyserver

Types:
Agents      : {a,b,s,i} #Mandatory; contains all agents in the protocol
Dishonest   : {i}       #Mandatory; contains dishonest agents in the protocol
H           : {a,b}     #These are our honest users
S           : {s}       #This is our server
U           : {a,b,i}   #These are our users
Sts         : {valid,revoked} #These are statuses for our keys
PK,NPK      : value     #Keys used during protocol run

Sets:
ring(U), db(S,U,Sts)    #Our sets; user keyring and server database

Facts:                  #This protocol does not make use of facts. We
#empty                  #leave an optional comment there for clarity.

Subprotocols:
#Honest user creates a new public key
H: create(PK)
H: insert(PK,ring(H))
H->S: sync
S: insert(PK,db(S,H,valid))
S->H: PK
---
#Dishonest user creates a new public key
i: create(PK)
i: insert(PK,ring(i))
i->S: sync
S: insert(PK,db(S,i,valid))
S->i: PK, inv(PK)  #intruder shares their new private key with dishonest users
---
#A user sends a new key to be registered with the server and
#the old one is revoked
U: select PK from ring(U)      #We select PK because we need to use it
U: create(NPK)                 #for signing when we send the new key
U: insert(NPK,ring(U))
U->S: {U,NPK}inv(PK)
S: if NPK notin db(S,_,_)      #The server checks if the new key is in its
S: insert(NPK,db(S,U,valid))   #database of all users and all states before
S: select PK from db(S,U,valid)#inserting it as a valid key and revoking
S: delete(PK,db(S,U,valid))    #the old one
S: insert(PK,db(S,U,revoked))

Attacks:
->referee: inv(PK)              #The referee receives a private key
referee: if PK in db(S,H,valid)
